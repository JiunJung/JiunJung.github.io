I"k<h4 id="컴퓨터-구조-강의를-듣기-전-지난-논리회로설계-강의를-복습하면서-중요하다고-생각하는-부분을-좀-적어보았다">컴퓨터 구조 강의를 듣기 전 지난 논리회로설계 강의를 복습하면서 중요하다고 생각하는 부분을 좀 적어보았다.</h4>

<h1 id="verilog와-behavioral-coding">verilog와 behavioral coding</h1>

<p>verilog는 HDL로서 HDL은 Hardware description language의 약자이다.
C언어로 하드웨어의 특정부분을 표현하기에는 한계가 있어 등장하게 되었다.
다음은 베릴로그 코드의 예시이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module example(a,b,c,f,e);
    input a,b,c;
    output f,e;

    and g1(d,a,b);
    not g2(e,c);
    or g3(f,d,e);
endmodule
</code></pre></div></div>

<p>a,b,c,f,e 는 port라고 부르며 input port, output port로 나뉜다.
d와 같이 회로의 node에도 labeling을 해주어야한다.
위와 같은 코드는 structural code라고 할 수 있는데, 말 그대로 회로의 구조 그대로, 즉, 게이트를 그냥 코드로 옮겨 놓은 것이다.
이러한 코딩 방식의 문제점은 VLSI와 같은 규모가 큰 회로를 설계할 때 상당히 복잡해진다는 것이다.
behavioral coding을 통해 이러한 문제를 해결할 수 있다. 다음은 behavioral coding 예시이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>assign d = a &amp; b;
assign e = ~ c;
assign f = d | e;
</code></pre></div></div>

<p>assign은 조합논리회로(combination circuit)임을 명시해주는 예약어이다.
이처럼 behavioral coding이란 회로의 구조가 아닌, 구현할 기능을 명시하는 코딩 방식이다.</p>

<h1 id="dut와-testbench">DUT와 TestBench</h1>
<p>Testbench란 회로가 동작을 하는 지 테스트 하는 것을 말한다.
DUT란 Device Under Test의 약자로 테스트 대상 장비를 일컫는 말이다.
회로 검증 시, Testbench 모듈 내에서 DUT모듈을 테스트하는 식으로 코드가 짜여지게된다.
예를 들어 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module tb_examble();
    reg x,y,z;
    wire m,n;

    &lt;some DUT&gt;

    &lt;some test&gt;

endmodule
</code></pre></div></div>

<h1 id="기타-verilog-용어">기타 verilog 용어</h1>
<ul>
  <li>initial 이란 0ns에 초기화 할 것을 말함. 여러개를 병렬적으로 initilaize할 수 있음.</li>
  <li>#20 이란 20ns만큼 딜레이 시킨 후 다음 명령을 수행할 것이라는 의미.</li>
  <li>$finish 란 시뮬레이션을 종료한다는 뜻.</li>
  <li>4’b0100 이란 크기가 4인 binary 0100 (십진수로는 4)이라는 뜻.</li>
</ul>

<p>다음 예시는 module을 만들고 쓰는 예시임.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>module mydesign(input x, y, z
                output o);
    ...
endmodule

module tb_top();
    wire[1:0] a;
    wire b,c;
    mydesign d0(a[0],b,a[1],c);

endmodule
</code></pre></div></div>

<p>참고로 [1:0] 은 0부터 1까지 2칸의 array라고 생각할 수 있음. 여기선 bus 라고 함.
mydesign d0와 같이 모듈과 그 모듈의 새로운 이름을 주면서 모듈 사용.</p>
:ET