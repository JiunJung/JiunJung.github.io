I"u<h1 id="chip-design-flow">Chip Design Flow</h1>

<p>오늘은 설계자 관점에서 반도체 칩(특히, ASIC)이 만들어지는 과정을 소개하려고 합니다. 실제로는 각 단계에서 세분화되기도 하고, 몇몇 단계가 동시에 수행되기도 합니다. 자, 이제 전형적인 Design Flow에 대해서 말씀드리겠습니다.</p>

<hr />

<h2 id="1-collect-requirements">1. Collect Requirements</h2>
<p><br />
우선, 시장의 수요를 조사하여 어떠한 스펙을 가진 반도체 칩을 만들지 정해야 합니다.</p>

<p><br /></p>

<h2 id="2-product-requirementspecipication">2. Product Requirement/Specipication</h2>
<p><br />
반도체 칩의 구체적인 스펙을 결정합니다. 예를 들어, 동작 주파수는 몇 Hz로 할 것인지, USB나 PCIe 인터페이스를 요구하는 지 등의 스펙을 정합니다.</p>

<p><br /></p>

<h2 id="3-architecture-specification">3. Architecture Specification</h2>
<p><br />
칩의 구조를 구상하는 단계입니다. 위에서 결정한 스펙을 충족하는 칩을 만들기 위해서 어떠한 구성요소가 필요한 지, 각 구성요소간 어떻게 연결해야 하는 지 결정합니다.</p>

<p><img src="/img/in_post/chip-require.jpg" width="500" height="500" /></p>

<p>(출처 : chipverify.com)</p>

<p><br /></p>

<h2 id="4-digital-design">4. Digital Design</h2>

<p><br /></p>

<p>베릴로그와 같은 하드웨어 기술 언어를 통해 칩을 설계합니다. 쉽게 말해 베릴로그 코딩하는 단계라고 말할 수 있습니다. 이 단계를 RTL이라고도 하고요, 이는 Resistor transfer level의 준말입니다.</p>

<p>이 때, 보통 칩의 모든 부분을 처음부터 끝까지 모두 설계하는 것은 아닙니다. IP Vendor에서 IP를 사들이거나, 이미 만들어진 모듈을 사용하여 설계합니다. 이렇게 하면 시간을 절약할 수 있으니까요. 참고로, 이 단계에서 베릴로그 코딩은 게이트 수준의 코딩이 아닙니다. 구현할 기능을 명시하는 Behavior 코딩을 통해서 하드웨어의 동작을 기술하게 됩니다. 이는, 초고집적된 반도체 칩의 회로설계를 더 이상 게이트 수준에서 디자인하기에는 굉장히 복잡하고 많은 시간이 걸리기 때문입니다. 따라서 Behavior 코딩을 통해 디자인 한 후, 나중에 Synthesis 작업을 통해서 게이트 수준의 코드로 변환하여 시간을 절약할 수 있습니다.</p>

<p><img src="/img/in_post/verilog.jpg" width="300" height="450" /></p>

<p>베릴로그 코드 (출처 : chipverify.com)</p>

<p><br /></p>

<h2 id="5-verification">5. Verification</h2>

<p><br /></p>

<p>우리가 RTL 단계에서 설계한 것에 문제가 없고 잘 동작하는 지 테스트하는 단계입니다. 칩이 물리적으로 제작되기 이전에 검증하는 단계이기 때문에 pre-silicon verification이라고도 합니다.</p>

<p>이 단계에서는 테스트 벤치를 만들어서 이전 단계의 RTL 디자인을 검증합니다. 다양한 stimulus를 DUT에 넣어주면서 설계한 것이 원하는 대로 잘 동작하는 지 시뮬레이션합니다. 에러가 있으면 다시 이전 단계로 돌아가 RTL 디자인을 수정하고 다시 검증 작업을 하는 방식으로 진행됩니다.</p>

<p><br /></p>

<h2 id="6-logic-synthesis">6. Logic Synthesis</h2>

<p><br /></p>

<p>RTL 코드를 게이트 수준의 netlist로 변환하는 작업입니다. EDA tool이 Behavior 코드를 해석하여 게이트 수준의 코드로 바꿔줍니다. 이 단계가 있기 때문에 앞서 RTL 코딩 시 게이트 수준의 코딩이 아닌 Behavior 코딩을 통해 디자인하는 것이 가능했던 것입니다.</p>

<p><img src="/img/in_post/netlist.jpg" width="700" heigth="300" /></p>

<p><br /></p>

<h2 id="7-logic-equivalence">7. Logic Equivalence</h2>

<p><br /></p>

<p>Synthesis의 결과물인 netlist를 검증하는 단계입니다. 굉장히 많은 논리 게이트와 플립플롭이 있기 때문에 검증을 하는 시간은 굉장히 오래걸립니다. 앞서 pre-silicon verification을 이미 수행했는데도 이 단계를 진행하는 이유는 RTL 디자인에 맞게 netlist가 잘 생성되었는지 검증하기 위함입니다.</p>

<p><br /></p>

<h2 id="8-placement-and-routing">8. Placement and Routing</h2>

<p><br /></p>

<p>앞서 생성된 netlist가 물리적인 디자인으로</p>

<p><br /></p>
:ET